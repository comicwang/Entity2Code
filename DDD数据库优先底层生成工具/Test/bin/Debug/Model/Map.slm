using $DomainEntity$;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.SqlClient;
using System.Data.Entity.ModelConfiguration;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace $Infrastruct$
{
    internal class MdTileConfiguration : EntityTypeConfiguration<TBL_MD_TILE_EXTINFO>
    {
        public MdTileConfiguration(string schema = tbl.Schema)
        {
            ToTable(TBL_MD_TILE_EXTINFO, dbo);
            HasKey(x => x.METAGUID);
            Property(x => x.METAGUID).HasColumnName("METAGUID").IsRequired().IsUnicode(false).HasMaxLength(36).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DATASETNAME).HasColumnName("DATASETNAME").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ZEROLEVERSIZE).HasColumnName("ZEROLEVERSIZE").IsOptional().HasPrecision(18, 0);
            Property(x => x.LASTMODIFIEDDATETIME).HasColumnName("LASTMODIFIEDDATETIME").IsOptional().HasPrecision(3);
            Property(x => x.LASTLOGINGUID).HasColumnName("LASTLOGINGUID").IsOptional().IsUnicode(false).HasMaxLength(36);
            Property(x => x.LASTMODIFIEDUSERLOGNAME).HasColumnName("LASTMODIFIEDUSERLOGNAME").IsOptional().IsUnicode(false).HasMaxLength(20);
            HasRequired(a => a.TBL_MD_ID).WithOptional(b => b.TBL_MD_TILE_EXTINFO).WillCascadeOnDelete(true); // FK_TILE_EXTINFO_REF_MD_ID
        }
    }
}
